/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_nymclient_free(a: number): void;
export function __wbg_nymclientbuilder_free(a: number): void;
export function nymclientbuilder_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function nymclientbuilder_new_tester(a: number, b: number, c: number, d: number): number;
export function nymclientbuilder_start_client(a: number): number;
export function nymclient_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function nymclient_self_address(a: number, b: number): void;
export function nymclient_try_construct_test_packet_request(a: number, b: number, c: number, d: number, e: number): number;
export function nymclient_change_hardcoded_topology(a: number, b: number): number;
export function nymclient_current_network_topology(a: number): number;
export function nymclient_try_send_test_packets(a: number, b: number): number;
export function nymclient_send_regular_message(a: number, b: number, c: number, d: number, e: number): number;
export function nymclient_send_anonymous_message(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function nymclient_send_reply(a: number, b: number, c: number, d: number, e: number): number;
export function get_gateway(a: number, b: number, c: number, d: number): number;
export function __wbg_wasmnymtopology_free(a: number): void;
export function wasmnymtopology_new(a: number, b: number, c: number): void;
export function wasmnymtopology_print(a: number): void;
export function __wbg_wasmmixnode_free(a: number): void;
export function __wbg_get_wasmmixnode_mix_id(a: number): number;
export function __wbg_set_wasmmixnode_mix_id(a: number, b: number): void;
export function __wbg_get_wasmmixnode_owner(a: number, b: number): void;
export function __wbg_set_wasmmixnode_owner(a: number, b: number, c: number): void;
export function __wbg_get_wasmmixnode_host(a: number, b: number): void;
export function __wbg_set_wasmmixnode_host(a: number, b: number, c: number): void;
export function __wbg_get_wasmmixnode_mix_port(a: number): number;
export function __wbg_set_wasmmixnode_mix_port(a: number, b: number): void;
export function __wbg_get_wasmmixnode_identity_key(a: number, b: number): void;
export function __wbg_set_wasmmixnode_identity_key(a: number, b: number, c: number): void;
export function __wbg_get_wasmmixnode_sphinx_key(a: number, b: number): void;
export function __wbg_set_wasmmixnode_sphinx_key(a: number, b: number, c: number): void;
export function __wbg_get_wasmmixnode_layer(a: number): number;
export function __wbg_set_wasmmixnode_layer(a: number, b: number): void;
export function __wbg_get_wasmmixnode_version(a: number, b: number): void;
export function __wbg_set_wasmmixnode_version(a: number, b: number, c: number): void;
export function wasmmixnode_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): number;
export function __wbg_wasmgateway_free(a: number): void;
export function __wbg_get_wasmgateway_owner(a: number, b: number): void;
export function __wbg_set_wasmgateway_owner(a: number, b: number, c: number): void;
export function __wbg_get_wasmgateway_host(a: number, b: number): void;
export function __wbg_set_wasmgateway_host(a: number, b: number, c: number): void;
export function __wbg_get_wasmgateway_mix_port(a: number): number;
export function __wbg_set_wasmgateway_mix_port(a: number, b: number): void;
export function __wbg_get_wasmgateway_clients_port(a: number): number;
export function __wbg_set_wasmgateway_clients_port(a: number, b: number): void;
export function __wbg_get_wasmgateway_identity_key(a: number, b: number): void;
export function __wbg_set_wasmgateway_identity_key(a: number, b: number, c: number): void;
export function __wbg_get_wasmgateway_sphinx_key(a: number, b: number): void;
export function __wbg_set_wasmgateway_sphinx_key(a: number, b: number, c: number): void;
export function __wbg_get_wasmgateway_version(a: number, b: number): void;
export function __wbg_set_wasmgateway_version(a: number, b: number, c: number): void;
export function wasmgateway_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): number;
export function current_network_topology(a: number, b: number): number;
export function __wbg_nodetestresult_free(a: number): void;
export function __wbg_get_nodetestresult_sent_packets(a: number): number;
export function __wbg_set_nodetestresult_sent_packets(a: number, b: number): void;
export function __wbg_get_nodetestresult_received_packets(a: number): number;
export function __wbg_set_nodetestresult_received_packets(a: number, b: number): void;
export function __wbg_get_nodetestresult_received_acks(a: number): number;
export function __wbg_set_nodetestresult_received_acks(a: number, b: number): void;
export function __wbg_get_nodetestresult_duplicate_packets(a: number): number;
export function __wbg_set_nodetestresult_duplicate_packets(a: number, b: number): void;
export function __wbg_get_nodetestresult_duplicate_acks(a: number): number;
export function __wbg_set_nodetestresult_duplicate_acks(a: number, b: number): void;
export function nodetestresult_log_details(a: number): void;
export function nodetestresult_score(a: number): number;
export function encode_payload(a: number, b: number, c: number, d: number, e: number): void;
export function encode_payload_with_headers(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function decode_payload(a: number, b: number, c: number): void;
export function parse_utf8_string(a: number, b: number, c: number): void;
export function utf8_string_to_byte_array(a: number, b: number, c: number): void;
export function __wbg_clientstorage_free(a: number): void;
export function clientstorage_new(a: number, b: number, c: number, d: number): number;
export function clientstorage_new_unencrypted(a: number, b: number): number;
export function __wbg_nymnodetester_free(a: number): void;
export function __wbg_nymnodetesterbuilder_free(a: number): void;
export function nymnodetesterbuilder_new(a: number, b: number, c: number, d: number, e: number): number;
export function nymnodetesterbuilder_new_with_api(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function nymnodetesterbuilder_setup_client(a: number): number;
export function nymnodetester_new(a: number, b: number, c: number, d: number, e: number): number;
export function nymnodetester_new_with_api(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function nymnodetester_disconnect_from_gateway(a: number): number;
export function nymnodetester_reconnect_to_gateway(a: number): number;
export function nymnodetester_test_node(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function validate_recipient(a: number, b: number, c: number): void;
export function set_panic_hook(): void;
export function __wbg_nymclienttestrequest_free(a: number): void;
export function nymclienttestrequest_injectable_topology(a: number): number;
export function __wbg_config_free(a: number): void;
export function config_new(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_get_trafficwasm_use_extended_packet_size(a: number): number;
export function __wbg_set_trafficwasm_use_extended_packet_size(a: number, b: number): void;
export function __wbg_get_trafficwasm_use_outfox(a: number): number;
export function __wbg_set_trafficwasm_use_outfox(a: number, b: number): void;
export function __wbg_get_covertrafficwasm_disable_loop_cover_traffic_stream(a: number): number;
export function __wbg_set_covertrafficwasm_disable_loop_cover_traffic_stream(a: number, b: number): void;
export function __wbg_gatewayconnectionwasm_free(a: number): void;
export function __wbg_acknowledgementswasm_free(a: number): void;
export function __wbg_get_acknowledgementswasm_average_ack_delay_ms(a: number): number;
export function __wbg_set_acknowledgementswasm_average_ack_delay_ms(a: number, b: number): void;
export function __wbg_get_acknowledgementswasm_ack_wait_multiplier(a: number): number;
export function __wbg_set_acknowledgementswasm_ack_wait_multiplier(a: number, b: number): void;
export function __wbg_get_acknowledgementswasm_ack_wait_addition_ms(a: number): number;
export function __wbg_set_acknowledgementswasm_ack_wait_addition_ms(a: number, b: number): void;
export function __wbg_replysurbswasm_free(a: number): void;
export function __wbg_get_replysurbswasm_minimum_reply_surb_storage_threshold(a: number): number;
export function __wbg_set_replysurbswasm_minimum_reply_surb_storage_threshold(a: number, b: number): void;
export function __wbg_get_replysurbswasm_maximum_reply_surb_storage_threshold(a: number): number;
export function __wbg_set_replysurbswasm_maximum_reply_surb_storage_threshold(a: number, b: number): void;
export function __wbg_get_replysurbswasm_minimum_reply_surb_request_size(a: number): number;
export function __wbg_set_replysurbswasm_minimum_reply_surb_request_size(a: number, b: number): void;
export function __wbg_get_replysurbswasm_maximum_reply_surb_request_size(a: number): number;
export function __wbg_set_replysurbswasm_maximum_reply_surb_request_size(a: number, b: number): void;
export function __wbg_get_replysurbswasm_maximum_allowed_reply_surb_request_size(a: number): number;
export function __wbg_set_replysurbswasm_maximum_allowed_reply_surb_request_size(a: number, b: number): void;
export function __wbg_get_replysurbswasm_maximum_reply_surb_drop_waiting_period_ms(a: number): number;
export function __wbg_set_replysurbswasm_maximum_reply_surb_drop_waiting_period_ms(a: number, b: number): void;
export function __wbg_get_replysurbswasm_maximum_reply_key_age_ms(a: number): number;
export function __wbg_set_replysurbswasm_maximum_reply_key_age_ms(a: number, b: number): void;
export function __wbg_debugwasm_free(a: number): void;
export function __wbg_get_debugwasm_traffic(a: number): number;
export function __wbg_set_debugwasm_traffic(a: number, b: number): void;
export function __wbg_get_debugwasm_cover_traffic(a: number): number;
export function __wbg_set_debugwasm_cover_traffic(a: number, b: number): void;
export function __wbg_get_debugwasm_gateway_connection(a: number): number;
export function __wbg_set_debugwasm_gateway_connection(a: number, b: number): void;
export function __wbg_get_debugwasm_acknowledgements(a: number): number;
export function __wbg_set_debugwasm_acknowledgements(a: number, b: number): void;
export function __wbg_get_debugwasm_topology(a: number): number;
export function __wbg_set_debugwasm_topology(a: number, b: number): void;
export function __wbg_get_debugwasm_reply_surbs(a: number): number;
export function __wbg_set_debugwasm_reply_surbs(a: number, b: number): void;
export function default_debug(): number;
export function __wbg_set_trafficwasm_average_packet_delay_ms(a: number, b: number): void;
export function __wbg_set_gatewayconnectionwasm_gateway_response_timeout_ms(a: number, b: number): void;
export function __wbg_set_covertrafficwasm_loop_cover_traffic_average_delay_ms(a: number, b: number): void;
export function __wbg_set_covertrafficwasm_cover_traffic_primary_size_ratio(a: number, b: number): void;
export function __wbg_set_topologywasm_topology_refresh_rate_ms(a: number, b: number): void;
export function __wbg_set_trafficwasm_message_sending_average_delay_ms(a: number, b: number): void;
export function __wbg_set_replysurbswasm_maximum_reply_surb_rerequest_waiting_period_ms(a: number, b: number): void;
export function __wbg_set_topologywasm_topology_resolution_timeout_ms(a: number, b: number): void;
export function __wbg_set_replysurbswasm_maximum_reply_surb_age_ms(a: number, b: number): void;
export function __wbg_get_trafficwasm_disable_main_poisson_packet_distribution(a: number): number;
export function __wbg_get_topologywasm_disable_refreshing(a: number): number;
export function __wbg_set_trafficwasm_disable_main_poisson_packet_distribution(a: number, b: number): void;
export function __wbg_set_topologywasm_disable_refreshing(a: number, b: number): void;
export function __wbg_get_trafficwasm_average_packet_delay_ms(a: number): number;
export function __wbg_get_gatewayconnectionwasm_gateway_response_timeout_ms(a: number): number;
export function __wbg_get_covertrafficwasm_loop_cover_traffic_average_delay_ms(a: number): number;
export function __wbg_get_covertrafficwasm_cover_traffic_primary_size_ratio(a: number): number;
export function __wbg_get_topologywasm_topology_refresh_rate_ms(a: number): number;
export function __wbg_get_trafficwasm_message_sending_average_delay_ms(a: number): number;
export function __wbg_get_replysurbswasm_maximum_reply_surb_rerequest_waiting_period_ms(a: number): number;
export function __wbg_get_topologywasm_topology_resolution_timeout_ms(a: number): number;
export function __wbg_get_replysurbswasm_maximum_reply_surb_age_ms(a: number): number;
export function __wbg_trafficwasm_free(a: number): void;
export function __wbg_covertrafficwasm_free(a: number): void;
export function __wbg_topologywasm_free(a: number): void;
export function __wbg_gatewayendpointconfig_free(a: number): void;
export function __wbg_get_gatewayendpointconfig_gateway_id(a: number, b: number): void;
export function __wbg_set_gatewayendpointconfig_gateway_id(a: number, b: number, c: number): void;
export function __wbg_get_gatewayendpointconfig_gateway_owner(a: number, b: number): void;
export function __wbg_set_gatewayendpointconfig_gateway_owner(a: number, b: number, c: number): void;
export function __wbg_get_gatewayendpointconfig_gateway_listener(a: number, b: number): void;
export function __wbg_set_gatewayendpointconfig_gateway_listener(a: number, b: number, c: number): void;
export function gatewayendpointconfig_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_anonymoussendertag_free(a: number): void;
export function interface_version_8(): void;
export function allocate(a: number): number;
export function deallocate(a: number): void;
export function requires_iterator(): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha1e005bc9b57c90c(a: number, b: number, c: number, d: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h71a148875a2c330f(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h07195fa7991e1ddf(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hada7de604acd93c9(a: number, b: number): void;
export function _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h844be727de79a10b(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h62aac500ae55364d(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha67d0876201d9695(a: number, b: number, c: number): void;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__ha2b01935184b2143(a: number, b: number, c: number, d: number): void;
